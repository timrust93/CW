@page
@model TemplateManagementModel
@using authHelpers = Forms.AuthorizationHelpers; 
@{
    var questionsJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionList);
    var questionTypesJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionTypeInfos);
    string changeOrderLink = $"TemplateManagement?handler=ChangeOrder&id={Model.TemplateId}";
    string saveQuestionLink = $"TemplateManagement?handler=SaveQuestion&id={Model.TemplateId}";
    string deleteQuestionLink = $"TemplateManagement?handler=DeleteQuestion&id={Model.TemplateId}";
    string antiForgeryKey = authHelpers.AuthHelper.ANTI_FORGERY;
}

<div>    
    Here you manage template
</div>

<ul id="sortable">    
</ul>

<a class="btn btn-primary" id="CreateQButton" asp-page="CreateQuestion" asp-route-id="@Model.Template.Id">Create new</a>





<template id="questionTemplate">
    <li>
        <form method="POST">
            <div>
                <label>Question Type</label>
                <div>
                    <select class="form-select"  data=""
                        data-val="true" data-val-required="The Question Type field is required.">
                        <option value="" disabled="" selected="">Please pick one</option>
                        <option value="0">Single Line</option>
                        <option value="1">Multi Line</option>
                        <option value="2">Number</option>
                        <option value="3">Checkbox</option>
                    </select>
                    <div>
                        <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
                    </div>                    
                </div>           
                <label>Title:</label>
                <input type="text" class="form-control"
                       data-name="Title"
                       data-val="true" data-val-required="The Title field is required." />
                <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
            </div>
            <div>
                <label>Description:</label>
                <textarea type="text" class="form-control"
                       data-name="Description"
                       data-val="true" data-val-required="The Description field is required." />
                </textarea>
                <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
            </div>
            <div>
                <button type="button" data="" onclick="onSaveQuestion(this)">Save</button>
                <button type="button" data="" onclick="onDeleteQuestion(this)">Delete</button>
            </div>
        </form>
    </li>
</template>


@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
    <script>
        $(function () {
            var sortable = $('#sortable');
            //$('#sortable').sortable();
            sortable.sortable({
                update: function (event, ui) { sortableUpdated(event, ui); }
            });            
            
        });
    </script>

    <script>
        var initialQuestions = @Html.Raw(questionsJson);
        $(document).ready(function () {            
            initialQuestions.forEach(function (question, index) {
                var questionElement = createQuestionForm(question.Title, question.Description);
                
                document.getElementById("sortable").appendChild(questionElement);
                $.validator.setDefaults({ ignore: [] });
                $.validator.unobtrusive.parse(`#form${index}`);
            });

            var forms = document.querySelector('#sortable').querySelectorAll("form");
            for (i = 0; i < forms.length; i++)
            {
                console.log(forms[i]);
                $(forms[i]).on('keydown', function (e) {
                    if (e.key === "Enter" &&
                        ($(e.target)[0] != $("textarea")[0])) {
                        e.preventDefault(); // Prevent form submission
                        return false;
                    }
                });
            }

            checkCreateQuestionButton();
            //$.validator.setDefaults({ ignore: [] });

        });

        
        // Function to add an initial question or new blank question
        function createQuestionForm(title = "", description = "") {
            var index = $("#sortable li").length;

            // Clone the template
            var template = document.getElementById("questionTemplate");
            var clone = document.importNode(template.content, true);

            var li = clone.querySelector("li");
            li.id = `qli${index}`;            
            li.id = `qli${index}`;
            li.setAttribute("data", index);
            
            // Populate fields
            var form = clone.querySelector("form");
            form.id = `form${index}`;
            form.setAttribute("data", initialQuestions[index].Id);

            var select = form.querySelector("select");
            select.id = "selectQType" + index;
            select.name = `selectQType[${index}]`;
            select.value = initialQuestions[index].Type;
            console.log("select value: " + select.value);
            $(select).find("option:first").prop("disabled", true);

            $(select).selectmenu();
            $(select).selectmenu({
                open: function (event, ui) { onQTypeDropdownOpen(event, ui) },
                select: function (event, ui) { onQTypeDropdownChosen(event, ui) },
                close: function (event) { resetSelectedDDVal(event.target.value, event.target);}                
            });

            $(select).next('.ui-selectmenu-button').on('mousedown', function (e) {
                console.log('mousedown on selectmenu button');
                e.stopImmediatePropagation(); // Prevents dragging behavior from triggering
            });

            var inputs = form.querySelectorAll("input");
            inputs[0].id = `title${index}`;
            inputs[0].name = `QuestionList[${index}].Title`;
            inputs[0].value = title;

            var textAreas = clone.querySelectorAll("textarea");
            textAreas[0].id = `description${index}`;
            textAreas[0].name = `QuestionList[${index}].Description`;
            textAreas[0].value = description;

            var spans = form.querySelectorAll(".templateValidation");
            spans[0].setAttribute("data-valmsg-for", `selectQType[${index}]`);
            spans[1].setAttribute("data-valmsg-for", `QuestionList[${index}].Title`);
            spans[2].setAttribute("data-valmsg-for", `QuestionList[${index}].Description`);

            var buttons = form.querySelectorAll("button");
            buttons.forEach(x => x.setAttribute("data", index));
            
            return clone;
        }

        var prevOpenDropdown = null;
        var questionTypes = @Html.Raw(questionTypesJson);
        function onQTypeDropdownOpen(event, ui) {                        
            console.log("open");
            var $select = $(event.target);

            // Close the currently open dropdown if it's not the same as this one
            if (prevOpenDropdown && prevOpenDropdown !== $select[0]) {
                console.log('close because');
                $(prevOpenDropdown).selectmenu("close");
            }
            prevOpenDropdown = $select[0]

            $select.children("option").each(function (index, option) {
                if (index == 0) return;
                var qType = questionTypes[index - 1];                
                option.text = `${qType.DisplayName} (${qType.Left})`;
                $(option).prop("disabled", qType.Left <= 0);
                    
            });
            $select.selectmenu("refresh");
        }

        function onQTypeDropdownChosen(event, ui)
        {
            var id = $(ui)[0].item.value;            
            if(!id || isNaN(id)) return;

            var freedId = event.target.getAttribute("data");
            event.target.setAttribute("data", id);            
            countQuestionTypeData(freedId, id);
        }

        function resetSelectedDDVal(id, select) {            
            var qType = questionTypes.find(obj => {
                return obj.Id == id;
            });
            if (qType && id != '') {
                console.log("id found");
                $(select).find(`option[value="${id}"]`).text(qType.DisplayName); // Change the display name
            }
            $(select).selectmenu("refresh");
        }

        function countQuestionTypeData(freedId, chosenId) {
            if (freedId === chosenId)
                return;
            if (!isNaN(freedId) && freedId != '') {
                var questionType = questionTypes.find(x => x.Id == freedId);
                questionType.Left += 1;
            }
            questionType = questionTypes.find(x => x.Id == chosenId);
            questionType.Left -= 1;
        }

        function onSaveQuestion(args) {            
            var id = args.getAttribute('data');
            var form = $(`#form${id}`);
            var data = form.serializeArray();

            if (!form.valid())
                return;

            var questionData = initialQuestions.find(x => x.Id == form.attr("data"));
            var questionClone = { ...questionData };
            questionClone.Type = data[0].value;
            questionClone.Title = data[1].value;
            questionClone.Description = data[2].value;             
                                

            let link = "@Html.Raw(saveQuestionLink)";
            fetch(link, {
                method: 'POST',
                headers: getAjaxHeaders(),
                body: JSON.stringify(questionClone)
            }).then(response => response.json())
                .then(data => {
                    if (data.success) { 
                        questionData = questionClone;
                        alert('saved');
                    }
                    else{
                        alert(data.message);
                    }
                })
                .catch(error => {
                    alert('Something went wrong');
                });                        
        }

        function onDeleteQuestion(args) {
            var id = args.getAttribute('data');
            var form = $(`#form${id}`);
            var questionData = initialQuestions.find(x => x.Id == form.attr("data"));

            var li = form.parent("li");

            let link = "@Html.Raw(deleteQuestionLink)";
            fetch(link, {
                method: 'POST',
                headers: getAjaxHeaders(),
                body: JSON.stringify(questionData)
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        questionTypes.find(x => x.Id == questionData.Type).Left += 1;
                        initialQuestions.splice(initialQuestions.indexOf(questionData), 1);                        
                        $(li).remove();
                        checkCreateQuestionButton();
                    }
                    else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    alert('Something went wrong');
                });                      
        }

        function checkCreateQuestionButton()
        {
            var maxQuestionCount = @Html.Raw(Model.MaxQuestionCount);
            // console.log("max q count: " + maxQuestionCount);
            // return;
            var questionButton = document.getElementById("CreateQButton");
            var isHidden = initialQuestions.length >= maxQuestionCount;
            if (isHidden) {
                questionButton.setAttribute('hidden', true);
            }
            else {
                questionButton.removeAttribute('hidden');
            }
        }

        function sortableUpdated(event, ui) {
                        
            var sortable = $("#sortable");
            var idsInOrder = sortable.sortable("toArray");
            console.log(event.target.id);

            var reorderInfoArr = [];
            idsInOrder.forEach((value, index) => {
                var qId = sortable.find(`#${value}`).find("form").attr("data");                
                reorderInfoArr.push({ "QId": qId, orderIndex: index });
            });
            
            
            let link = "@Html.Raw(changeOrderLink)";
            fetch(link, {
                method: 'POST',
                headers: getAjaxHeaders(),
                body: JSON.stringify(reorderInfoArr)
            }).then(response => response.json())
                .then(data => {

                })
                .catch(error => {
                    alert('Something went wrong');
                });            
        }

        function getAjaxHeaders()
        {
            let antiforgeryName = "__RequestVerificationToken";
            let antiForgeryVal = $("#form0").find(`input[name=${antiforgeryName}]`).val();
            let headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append("@antiForgeryKey", antiForgeryVal);
            return headers;
        }
    </script>
}


<style>
    ul#sortable {
    list-style-type: none; /* Removes the dots */
    margin: 0;
    padding: 0;
    }

    .ui-selectmenu-menu {
        z-index: 1055 !important; /* Bootstrap modal has z-index: 1050 */
    }

    ul#sortable li {
    margin: 5px;
    padding: 10px; /* Space inside the li */
    border: 1px solid black; /* Add a border to make items clear */
    background-color: #f9f9f9;
    cursor: grab; /* Change cursor to indicate draggable */
    }

    ul#sortable li:active {
    cursor: grabbing;
    }

    ul#sortable li div {
    }
</style>