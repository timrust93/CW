@page
@model TemplateManagementModel
@using authHelpers = Forms.AuthorizationHelpers; 
@{
    var questionsJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionList);
    var questionTypesJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionTypeInfos);
    var templateInfoJson = System.Text.Json.JsonSerializer.Serialize(Model.TemplateCreatePOCO);
    string changeOrderLink = $"TemplateManagement?handler=ChangeOrder&id={Model.TemplateId}";
    string saveQuestionLink = $"TemplateManagement?handler=SaveQuestion&id={Model.TemplateId}";
    string deleteQuestionLink = $"TemplateManagement?handler=DeleteQuestion&id={Model.TemplateId}";
    string templateInfoUpdateLink = $"TemplateManagement?handler=UpdateTemplateInfo&id={Model.TemplateId}";
    string antiForgeryKey = authHelpers.AuthHelper.ANTI_FORGERY;
}

<h1 style="display:inline">    
    Manage your template 
</h1>
<span class="text-muted">
    (#@Model.TemplateId)
</span>
<br /><br />

<ejs-tab id="ej2Tab2" selecting="tabSelecting">
    <e-tab-tabitems>
        <e-tab-tabitem>
            <e-content-template>
                <div>
                    <div class="e-tab-header">
                        <div>Basic Info</div>
                        <div>Questions</div>
                        <div>Answered Forms</div>
                    </div>
                    <div class="e-content">
                        <div>
                            <form id="SaveTemplateBasic" method="POST">
                                <label asp-for="TemplateCreatePOCO.Title" class="form-label">Title</label>
                                <input asp-for="TemplateCreatePOCO.Title" class="form-control" />
                                <span asp-validation-for="TemplateCreatePOCO.Title" class="text-danger"></span>
                                <div>
                                    <label asp-for="TemplateCreatePOCO.Description" class="form-label">Description</label>
                                    <textarea asp-for="TemplateCreatePOCO.Description" class="form-control" rows="5"></textarea>
                                    <span asp-validation-for="TemplateCreatePOCO.Description" class="text-danger"></span>
                                </div>
                                <br />
                                <button type="button" class="btn btn-primary" onclick="updateTemplateInfo(this)" style="float:right">Save</button>
                            </form>
                        </div>
                        <div>
                            <ul id="sortable">
                            </ul>
                            <a class="btn btn-primary" id="CreateQButton" asp-page="CreateQuestion" asp-route-id="@Model.Template.Id">Create new</a>
                        </div>
                        <div>
                            <ejs-grid id="FormGrid" dataSource="@Model.FormDisplayList" allowSorting="true" allowSelection="false">
                                <e-grid-editSettings></e-grid-editSettings>
                                <e-grid-columns>
                                    <e-grid-column field="Author"></e-grid-column>
                                    <e-grid-column template="#formView"></e-grid-column>
                                </e-grid-columns>
                            </ejs-grid>
                        </div>
                    </div>
                </div>
            </e-content-template>
        </e-tab-tabitem>
    </e-tab-tabitems>
</ejs-tab>



<template id="questionTemplate">
    <li>
        <form method="POST">
            <div>
                <label>Question Type</label>
                <div>
                    <select class="form-select"  data=""
                            data-val="true" data-val-required="The Question Type field is required.">
                        <option value="" disabled="" selected="">Please pick one</option>
                        <option value="0">Single Line</option>
                        <option value="1">Multi Line</option>
                        <option value="2">Number</option>
                        <option value="3">Checkbox</option>
                    </select>
                    <div>
                        <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
                    </div>                                           
                    
                </div>           
                <label>Title:</label>
                <input type="text" class="form-control"
                       data-name="Title"
                       data-val="true" data-val-required="The Title field is required." />
                <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
            </div>
            <div>
                <label>Description:</label>
                <textarea class="form-control"
                       data-name="Description">
                </textarea>
            </div>
            <div>
                <button type="button" data="" onclick="onSaveQuestion(this)">Save</button>
                <button type="button" data="" onclick="onDeleteQuestion(this)">Delete</button>
            </div>
        </form>
    </li>
</template>

<script id="formView" type="text/x-template">
    <button class="btn btn-outline-primary btn-sm" onclick="onViewForm(this)">
        View
    </button>
</script>

<script type="text/javascript">
    function tabSelecting(e) {
        if (e.isSwiped) {
            e.cancel = true; // Prevent tab selection on swipe
        }
    }
</script>


@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>

    <script src="/js/questionManagement.js"></script>

    <script>
        var initialQuestions = @Html.Raw(questionsJson);
        var questionTypes = @Html.Raw(questionTypesJson);
        
        var maxQuestionCount = @Html.Raw(Model.MaxQuestionCount);

        var changeOrderLink = "@Html.Raw(changeOrderLink)";
        var deleteQuestionLink = "@Html.Raw(deleteQuestionLink)";
        var saveQuestionLink = "@Html.Raw(saveQuestionLink)";
        var antiForgeryKey = "@Html.Raw(antiForgeryKey)";        

        
        $(document).ready(function () {
            initializeQuestionManagement();

            let forms = document.querySelectorAll("form");
            for (i = 0; i < forms.length; i++) {
                console.log(i + ": " + forms[i].id);
                $(forms[i]).on('keydown', function (e) {
                    console.log("target: " + e.target.id + " closest: " + e.target.closest("form").id);
                    if (e.key === "Enter" &&
                        e.target.tagName.toLowerCase() !== "textarea") {
                        e.preventDefault(); // Prevent form submission
                        return false;
                    }
                });
            }
        });        
    </script>


    <script>
        function getGridRowOfButton(target, gridId) {
            var rowElement = target.closest('tr');
            var rowIndex = parseInt(rowElement.getAttribute('data-rowindex'), 10);
            const grid = document.querySelector(gridId).ej2_instances[0];
            let gridRow = grid.getRowsObject()[rowIndex];
            return gridRow;
        }

        function onViewForm(target)
        {
            let gridRow = getGridRowOfButton(target, "#FormGrid");
            var rowData = gridRow.data.Id;
            window.location.href = `AnswerFormView?id=${rowData}`;
        }

        function updateTemplateInfo()
        {
            var templateInfoJson = @Html.Raw(templateInfoJson);
            var templateInfoUpdateLink = "@Html.Raw(templateInfoUpdateLink)";
            let form = document.getElementById('SaveTemplateBasic');
            if (!$(form).valid())
            {
                return;
            }
            let data = Array.from(new FormData(form)).map(([name, value]) => ({
                name, value
            }));
            templateInfoJson.Title = data[0].value;
            templateInfoJson.Description = data[1].value;

            let link = templateInfoUpdateLink;
            fetch(link, {
                method: 'POST',
                headers: getAjaxHeaders(),
                body: JSON.stringify(templateInfoJson)
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {                        
                        alert('saved');
                    }
                    else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    alert('Something went wrong');
                });
        }

        function getAjaxHeaders() {
            let antiforgeryName = "__RequestVerificationToken";
            let antiForgeryVal = $("#form0").find(`input[name=${antiforgeryName}]`).val();
            let headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append(antiForgeryKey, antiForgeryVal);
            return headers;
        }
    </script>
}


<style>
    ul#sortable {
    list-style-type: none; /* Removes the dots */
    margin: 0;
    padding: 0;
    }

    .ui-selectmenu-menu {
        z-index: 1055 !important; /* Bootstrap modal has z-index: 1050 */
    }

    ul#sortable li {
    margin: 5px;
    padding: 10px; /* Space inside the li */
    border: 1px solid black; /* Add a border to make items clear */
    background-color: #f9f9f9;
    cursor: grab; /* Change cursor to indicate draggable */
    }

    ul#sortable li:active {
    cursor: grabbing;
    }

    ul#sortable li div {
    }
</style>