@page
@model TemplateManagementModel
@{
    var questionsJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionList);
    var questionTypesJson = System.Text.Json.JsonSerializer.Serialize(Model.QuestionTypeInfos);
}

<div>    
    Here you manage template
</div>

<ul id="sortable">    
</ul>

@{
    if (Model.QuestonsLeftToAdd)
    {
        // <button type="button" onclick="addNewQuestion()">Add New Question</button>
        <a class="btn btn-primary" asp-page="CreateQuestion" asp-route-id="@Model.Template.Id">Create new</a>
    }
}


<div class="modal" tabindex="-1" id="addQuestionModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure?</p>
            </div>
            <div class="modal-footer">
                <button type="button" id="deleteConfirm" class="btn btn-primary" data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>


<template id="questionTemplate">
    <li>
        <form method="POST">
            <div>
                <label>Question Type</label>
                <div>
                    <select class="form-select"  data=""
                        data-val="true" data-val-required="The Question Type field is required.">
                        <option value="" disabled="" selected="">Please pick one</option>
                        <option value="0">One line</option>
                        <option value="1">Multiline</option>
                        <option value="2">Number</option>
                        <option value="3">Checkbox</option>
                    </select>
                    <div>
                        <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
                    </div>                    
                </div>           
                <label>Title:</label>
                <input type="text" class="form-control"
                       data-name="Title"
                       data-val="true" data-val-required="The Title field is required." />
                <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
            </div>
            <div>
                <label>Description:</label>
                <textarea type="text" class="form-control"
                       data-name="Description"
                       data-val="true" data-val-required="The Description field is required." />
                </textarea>
                <span class="text-danger templateValidation" data-valmsg-replace="true"></span>
            </div>
            <div>
                <button type="button" data="" onclick="onClick(this)">Save</button>
            </div>
        </form>
    </li>
</template>


@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
    <script>
        $(function () {
            $('#sortable').sortable();
        });
    </script>

    <script>
        var initialQuestions = @Html.Raw(questionsJson);
        $(document).ready(function () {            
            initialQuestions.forEach(function (question, index) {
                var question = createQuestionForm(question.Title, question.Description);
                document.getElementById("sortable").appendChild(question);
                $.validator.setDefaults({ ignore: [] });
                $.validator.unobtrusive.parse(`#form${index}`);
            });

            var forms = document.querySelector('#sortable').querySelectorAll("form");
            for (i = 0; i < forms.length; i++)
            {
                console.log(forms[i]);
                $(forms[i]).on('keydown', function (e) {
                    if (e.key === "Enter" &&
                        ($(e.target)[0] != $("textarea")[0])) {
                        e.preventDefault(); // Prevent form submission
                        return false;
                    }
                });
            }

            //$.validator.setDefaults({ ignore: [] });

        });

        function addNewQuestion()
        {
            var modal = $("#addQuestionModal");
            const myModal = document.getElementById('addQuestionModal')
            var question = createQuestionForm();
            modal.find(".modal-body").append(question);
            var appendedQuestion = modal.find(".modal-body").children().last();
            $.validator.setDefaults({ ignore: [] });            
            $.validator.unobtrusive.parse(appendedQuestion);            
            modal.modal('toggle');
        }

        
        // Function to add an initial question or new blank question
        function createQuestionForm(title = "", description = "") {
            var index = $("#sortable li").length;

            // Clone the template
            var template = document.getElementById("questionTemplate");
            var clone = document.importNode(template.content, true);

            // Populate fields
            var form = clone.querySelector("form");
            form.id = `form${index}`;

            var select = form.querySelector("select");
            select.id = "selectQType" + index;
            select.name = `selectQType[${index}]`;
            select.value = initialQuestions[index].Type;
            console.log("select value: " + select.value);
            $(select).find("option:first").prop("disabled", true);

            $(select).selectmenu();
            $(select).selectmenu({
                open: function (event, ui) { onQTypeDropdownOpen(event, ui) },
                select: function (event, ui) { onQTypeDropdownChosen(event, ui) },
                close: function (event) { resetSelectedDDVal(event.target.value, event.target);}                
            });

            $(select).next('.ui-selectmenu-button').on('mousedown', function (e) {
                console.log('mousedown on selectmenu button');
                e.stopImmediatePropagation(); // Prevents dragging behavior from triggering
            });

            var inputs = form.querySelectorAll("input");
            inputs[0].id = `title${index}`;
            inputs[0].name = `QuestionList[${index}].Title`;
            inputs[0].value = title;

            var textAreas = clone.querySelectorAll("textarea");
            textAreas[0].id = `description${index}`;
            textAreas[0].name = `QuestionList[${index}].Description`;
            textAreas[0].value = description;

            var spans = form.querySelectorAll(".templateValidation");
            spans[0].setAttribute("data-valmsg-for", `selectQType[${index}]`);
            spans[1].setAttribute("data-valmsg-for", `QuestionList[${index}].Title`);
            spans[2].setAttribute("data-valmsg-for", `QuestionList[${index}].Description`);

            var buttons = form.querySelectorAll("button");
            buttons.forEach(x => x.setAttribute("data", index));

            
            // Append to sortable list
            //document.getElementById("sortable").appendChild(clone);                        

            // Re-parse for validation
            // $.validator.setDefaults({ ignore: [] });
            // $.validator.unobtrusive.parse(`#form${index}`);
            return clone;
        }

        var prevOpenDropdown = null;
        var questionTypes = @Html.Raw(questionTypesJson);
        function onQTypeDropdownOpen(event, ui) {                        
            console.log("open");
            var $select = $(event.target);

            // Close the currently open dropdown if it's not the same as this one
            if (prevOpenDropdown && prevOpenDropdown !== $select[0]) {
                console.log('close because');
                $(prevOpenDropdown).selectmenu("close");
            }
            prevOpenDropdown = $select[0]

            $select.children("option").each(function (index, option) {
                if (index == 0) return;
                var qType = questionTypes[index - 1];                
                option.text = `${qType.DisplayName} (${qType.Left})`;
                $(option).prop("disabled", qType.Left <= 0);
                    
            });
            $select.selectmenu("refresh");
        }

        function onQTypeDropdownChosen(event, ui)
        {
            var id = $(ui)[0].item.value;            
            if(!id || isNaN(id)) return;

            var freedId = event.target.getAttribute("data");
            event.target.setAttribute("data", id);            
            countQuestionTypeData(freedId, id);
        }

        function resetSelectedDDVal(id, select) {            
            var qType = questionTypes.find(obj => {
                return obj.Id == id;
            });
            if (qType && id != '') {
                console.log("id found");
                $(select).find(`option[value="${id}"]`).text(qType.DisplayName); // Change the display name
            }
            $(select).selectmenu("refresh");
        }

        function countQuestionTypeData(freedId, chosenId) {
            if (freedId === chosenId)
                return;
            if (!isNaN(freedId) && freedId != '') {
                var questionType = questionTypes.find(x => x.Id == freedId);
                questionType.Left += 1;
            }
            questionType = questionTypes.find(x => x.Id == chosenId);
            questionType.Left -= 1;
        }

        function onClick(args)
        {            
            var id = args.getAttribute('data');
            var form = $(`#form${id}`);

            var data = form.serializeArray();
            console.log("Form data: ", data);
            var mapped = data.map((x) => {
                let name = x.name.substring(x.name.lastIndexOf('.') + 1);                
                return { name : name, value : x.value }             
            });

            // fetch("/TemplateManagement/handler?" {
            //     method: 'POST',
            //     headers: {
            //         'Conent-Type':'application/json'
            //     }
            //     body: JSON
            // });

            
            console.log("mapped: ", mapped);
            
            console.log("form valid: " + form.valid());
        }
    </script>
}


<style>
    ul#sortable {
    list-style-type: none; /* Removes the dots */
    margin: 0;
    padding: 0;
    }

    .ui-selectmenu-menu {
        z-index: 1055 !important; /* Bootstrap modal has z-index: 1050 */
    }

    ul#sortable li {
    margin: 5px;
    padding: 10px; /* Space inside the li */
    border: 1px solid black; /* Add a border to make items clear */
    background-color: #f9f9f9;
    cursor: grab; /* Change cursor to indicate draggable */
    }

    ul#sortable li:active {
    cursor: grabbing;
    }

    ul#sortable li div {
    }
</style>